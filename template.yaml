AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GO_fun
  
  Sample SAM Template for GO_fun

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'
  HoneycombAPIKey:
    Type: String
    Description: Honeycomb IO API Key
  CognitoUsersPoolARN:
    Type: String
    Description: Cognito User Pool ID

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    Name: UsersAPI
    Auth: 
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !Ref CognitoUsersPoolARN
  Function:
    # TODO: DeploymentPreference (this is for slow rollouts)
    Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
      Variables:
        TABLE: "Users"
        New_RELIC_ACCOUNT_ID: !Ref NRAccountId
        NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Ref NRAccountId
        LIBHONEY_DATASET: CreateUsers
        LIBHONEY_API_KEY: !Ref HoneycombAPIKey
    Layers:
      - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicLambdaExtension:12
    Runtime: go1.x
    Timeout: 5
    Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html

Resources:

  UserFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      RoleName: UserFunctionsRole
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
  
  UserS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: paxi-users
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    
  GetUsersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      AutoPublishAlias: Stage
      CodeUri: getUsers/
      Events:
        GetUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users
            Method: GET
      FunctionName: GetUsers
      Handler: getUsers
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
        SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
      # TODO: ProvisionedConcurrencyConfig (provision concurrency)
      Role: !GetAtt UserFunctionsRole.Arn

  GetUsersLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/GetUsers
      RetentionInDays: 30

  CreateUsersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      AutoPublishAlias: Stage
      CodeUri: createUsers/
      Events:
        PostUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users
            Method: POST
      FunctionName: CreateUsers
      Handler: createUsers
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
        SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
      # TODO: ProvisionedConcurrencyConfig (provision concurrency)
      Role: !GetAtt UserFunctionsRole.Arn
      
  CreateUsersLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CreateUsers
      RetentionInDays: 30

  # GatewayApi:
  #   Type: AWS::Serverless::Api
  #   DependsOn:
  #     - GetUsersFunction
  #     - CreateUsersFunction
  #   Properties: 
  #     StageName: Prod
  #     Models:
  #       User:
  #         type: object
  #         required: # Can leave this section out if there are no required Properties in the list below
  #           - DeviceId
  #           - FirstName
  #           - LastName
  #         properties:
  #           UserId:
  #             type: string
  #           DeviceId:
  #             type: string
  #           FirstName:
  #             type: string
  #           LastName:
  #             type: string

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UsersAPI:
    Description: "API Gateway endpoint URL for Prod environment for Users Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
  GetUsersFunction:
    Description: "GetUsers Lambda Function ARN"
    Value: !GetAtt GetUsersFunction.Arn
  CreateUsersFunction:
    Description: "CreateUsers Lambda Function ARN"
    Value: !GetAtt CreateUsersFunction.Arn