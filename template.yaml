AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GO_fun
  
  Sample SAM Template for GO_fun

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
# AWS::Lambda::Permission (for each func)
# AWS::ApiGateway::RestApi
# AWS::ApiGateway::Deployment
# AWS::ApiGateway::Stage

Resources:
  UserFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: UserFunctionsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'

  UserS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: paxi-users
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  UsersApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: UsersApi
      Mode: overwrite
      Body:
        info:
          version: '1.0.0'
          title: "Users"
        paths:
          /users/{UserId}:
            post:
              summary: Create a new user
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
              operationId: createUser
              uri: !Sub >-
                arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUsersFunction.Arn}/invocations
              parameters:
                - name: UserId
                  in: path
                  description: The id of the user
                  required: true
                  schema:
                    type: string
                - name: user
                  in: query
                  description: User object
                  schema:
                    type: object
                    required:
                      - FirstName
                      - LastName
                    properties:
                      FirstName:
                        type: string
                      LastName:
                        type: string
              responses:
                "422":
                  description: Unprocessable Entity
                "404":
                  description: Not Found
                "201":
                  description: Created
            get:
                summary: Get a user by id
                x-amazon-apigateway-integration:
                  httpMethod: GET
                  type: aws_proxy
                operationId: getUserById
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
                parameters:
                  - name: UserId
                    in: path
                    description: The id of the user
                    required: true
                    schema:
                      type: string
                responses:
                  "422":
                    description: Unprocessable Entity
                  "404":
                    description: Not Found
                  "200":
                    description: OK
        openapi: '3.0.3'

  GetUsersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: GetUsers
      Role: !GetAtt UserFunctionsRole.Arn
      CodeUri: getUsers/{UserId}
      Handler: getUsers
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          TABLE: "Users"

  CreateUsersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: CreateUsers
      Role: !GetAtt UserFunctionsRole.Arn
      CodeUri: createUsers/{UserId}
      Handler: createUsers
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          TABLE: "Users" 

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # UsersAPI:
  #   Description: "API Gateway endpoint URL for Prod environment for Users Function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
  GetUsersFunction:
    Description: "GetUsers Lambda Function ARN"
    Value: !GetAtt GetUsersFunction.Arn
  CreateUsersFunction:
    Description: "CreateUsers Lambda Function ARN"
    Value: !GetAtt CreateUsersFunction.Arn
